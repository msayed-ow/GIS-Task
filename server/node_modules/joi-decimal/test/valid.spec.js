'use strict';

/* eslint-env mocha */
/* eslint-disable no-unused-expressions */

const { expect } = require('chai');

const BaseJoi = require('@hapi/joi');
const Decimal = require('decimal.js');
const DecimalExtension = require('..');

const Joi = BaseJoi.extend(DecimalExtension);


const decValidator = Joi.decimal().invalid('1e-324', 0);
const result = decValidator.validate(0);
console.log(result);

/*
const shouldSucceed = (value, ...values) => {
  it('should validate if value is one of values', () => {
    const decValidator = Joi.decimal().valid(values);

    const result = decValidator.validate(value);

    expect(result.error).to.be.null;
  });
};

const shouldFail = (value, values) => {
  it('should return a validation error if value is not one of values', () => {
    const decValidator = Joi.decimal().valid(values);

    const result = decValidator.validate(value);

    expect(result.error).to.not.be.null;
    expect(result.error.name).to.be.equal('ValidationError');
    expect(result.error.message).to.match(/is not one of/);
  });
};


describe('decimal - valid', () => {
  before(() => {
    Decimal.set({ defaults: true });

    Decimal.config({
      precision: 20,
      rounding: 4,
      toExpNeg: -9e15,
      toExpPos: 9e15,
      minE: -9e15,
      maxE: 9e15,
    });
  });

  // tests from decimal.js documentation
  shouldFail(0, '1e-324');
  shouldSucceed(0, '1e-324', 0);
  shouldSucceed(0, '1e-324', '0');
  shouldSucceed(0, '1e-324', -0);
  shouldSucceed(0, '1e-324', '-0');
  shouldSucceed(-0, 0);
  shouldFail(NaN, NaN);


  // tests from decimal.js
  it('set Decimal.modulo to 1', () => {
    Decimal.modulo = 1;
  });
});
*/
